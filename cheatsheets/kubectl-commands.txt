*** Some Important Command to understand
    # kubectl run nginx --image=nginx (to run a sample nginx pod)
    # kubectl get pods (to list the current pods in current or default namespace)
    # kubectl describe pod <pod_name> ( to check the more details on pod)
    # kubectl get pods -o wide (to check more detials about pods)
    # kubectl delete pod <pod_name> (to delete the pod)
    # kubectl run <pod_name> --image=<image_name> -dry-run=client -o yaml (to create yaml file for a pod)
    # kubectl create -f <file_name>.yaml (to create a pod or any other resoruce using yaml file)
    # kubectl edit <resource_name> (to edit the current configuration of resource)
    # kubectl explain <any_object> (to see the more details or help about that object)
        (# kubectl explain replicaset)

    # kubectl get all (to check the all resources at once)

    # kubectl create deployment --image=nginx nginx
    # kubectl expose deployment nginx --port 80
    # kubectl edit deployment nginx
    # kubectl sclae deployment nginx --replicas=5
    # kubectl set image deployment nginx nginx=ngninx:1.22
    # kubectl create -f nginx.yaml
    # kubectl replace -f nginx.yaml
    # kubectl replace --force -g nginx.yaml (to create the resouce from scratch)
    # kubectl delete -f nginx.yaml


###
Replica Set
    Scaling the replicaset:
        1) update the yaml file with new numbers of replicas required and replace it with:
            # kubectl replace -f <replica-file>.yaml
        2) we can directly scale the replica from command line but that will not udpate the replica-file.yaml:
            # kubectl scale --replicas=<new_number> -f <replica-file>.yaml
            OR 
            # kubectl scale --replica=<new_number> replicaset <name_of_replicaset>


##########

So far, we have seen the imperative approach with kubectl command where we need to talk about all operation to perform.

We can do as declarative way where kubectl can figure out its own what operation need to perform.
we can use:
    # kubectl apply -f <definition_file>.yaml
    OR if we have mulitple .yaml files then simply we can give directory path4cloud
    # kubectl apply -f /path/to/all_config_files

    