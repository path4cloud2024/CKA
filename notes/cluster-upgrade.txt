--> to check the upgrade plan run
# kubeadm upgrade plan

(if yhou are running more than 3 recent version from latest version then it will not show all stabel release beacuse it can support upto 3 backwards releases)

(so you need to specify the version number, like below)

# root@k8master:~# kubeadm upgrade plan v1.31.0
[preflight] Running pre-flight checks.
[upgrade/config] Reading configuration from the cluster...
[upgrade/config] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -o yaml'
[upgrade] Running cluster health checks
[upgrade] Fetching available versions to upgrade to
[upgrade/versions] Cluster version: 1.30.14
[upgrade/versions] kubeadm version: v1.30.14
[upgrade/versions] Target version: v1.31.0
[upgrade/versions] Latest version in the v1.30 series: v1.31.0

Components that must be upgraded manually after you have upgraded the control plane with 'kubeadm upgrade apply':
COMPONENT   NODE       CURRENT    TARGET
kubelet     k8master   v1.30.14   v1.31.0
kubelet     k8node1    v1.30.14   v1.31.0

Upgrade to the latest version in the v1.30 series:

COMPONENT                 NODE       CURRENT    TARGET
kube-apiserver            k8master   v1.30.14   v1.31.0
kube-controller-manager   k8master   v1.30.14   v1.31.0
kube-scheduler            k8master   v1.30.14   v1.31.0
kube-proxy                           1.30.14    v1.31.0
CoreDNS                              v1.11.3    v1.11.3
etcd                      k8master   3.5.15-0   3.5.15-0

You can now apply the upgrade by executing the following command:

        kubeadm upgrade apply v1.31.0

Note: Before you can perform this upgrade, you have to update kubeadm to v1.31.0.

_____________________________________________________________________


The table below shows the current state of component configs as understood by this version of kubeadm.
Configs that have a "yes" mark in the "MANUAL UPGRADE REQUIRED" column require manual config upgrade or
resetting to kubeadm defaults before a successful upgrade can be performed. The version to manually
upgrade to is denoted in the "PREFERRED VERSION" column.

API GROUP                 CURRENT VERSION   PREFERRED VERSION   MANUAL UPGRADE REQUIRED
kubeproxy.config.k8s.io   v1alpha1          v1alpha1            no
kubelet.config.k8s.io     v1beta1           v1beta1             no
_____________________________________________________________________



--> above command will list the current version and target version and what all componanats needs to upgrade manually.

--> we might need to upgade the kubeadm first to support the next version of kuberenetes

--> check the current version of kubeadm and kubelet as below:
# root@k8master:~# apt-cache policy kubeadm
kubeadm:
  Installed: 1.30.14-1.1
  Candidate: 1.34.0-ubuntu24.04u2
 (which might show the lastest but if you need to install the next version then check the list and specify the version as below)

 #  apt-get upgrade kubeadm=1.30.14-1.1
 OR
 # apt-get install kubeadm=1.30.14-1.1

 and might need or a good idea to hold the version of kubeadm to currently upgraded version so that, it will not get upgraded by mistake since it suppoort upto 3 recent version. So , its a good idea until we have cluster done, put the hold to version as below:

 # apt-mark hold kubeadm

 # apt-mark showhold (to list the holded package)

 # apt-mark unhold <package_name> (to unhold the package)

 ####################################
 ####################################

        CLUSTER UPGRADE

#####################################
#####################################
# kubeadm upgrade apply [<version_number>]

--> post upgrade of cluster, you might not see the latest version with # kubectl get nodes, beacuse it shows the kubectl information so we need to upgrade the kubectl as well as we did for kubeadm above.

--> drain the nodes since we have pods running on this
# kubectl drain <node_name>

--> once updated then uncordon this again
# kubectl uncordon <node_name>

--> on WORKER NODES, upgrade the kubeadm configuration
# kubeadm upgrade nodes

