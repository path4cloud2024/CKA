# Creating a dev namespace
apiVersion: v1
kind: Namespace
metadata:
  name: dev
  labels:
    env: test
    team: backend
  annotations:
    owner: "Path4Cloud"
    description: "This namespace is used for development workloads of the backend team"
---
# Creating a pod into dev namespace
apiVersion: v1
kind: Pod
metadata:
  name: dev-pod
  namespace: dev
spec:
  containers:
  - name: busybox
    image: busybox:1.36
    command: [ "sleep", "3600" ] # Keeps pod running
---
# creating a pod1 into default namespsce
apiVersion: v1
kind: Pod
metadata:
  name: def-pod-1
spec:
  containers:
  - name: busybox
    image: busybox:1.36
    command: [ "sleep", "3600" ] # Keeps pod running
---
# creating a pod2 into default namespsce
apiVersion: v1
kind: Pod
metadata:
  name: def-pod-2
spec:
  containers:
  - name: busybox
    image: busybox:1.36
    command: [ "sleep", "3600" ] # Keeps pod running
---
# creating a pod3 into default namespsce
apiVersion: v1
kind: Pod
metadata:
  name: def-pod-3
spec:
  containers:
  - name: busybox
    image: busybox:1.36
    command: [ "sleep", "3600" ] # Keeps pod running
---
# creating a nginx pod in default namespace
apiVersion: v1
kind: Pod
metadata:
  name: def-nginx
spec:
  containers:
  - name: nginx
    image: nginx:stable
    ports:
    - containerPort: 80
---
# creating a service to expose the nginx pod
apiVersion: v1
kind: Service
metadata:
  name: def-nginx-svc
spec:
  selector:
    app: def-nginx
  ports:
  - port: 80
    targetPort: 80
---


####
# Without network policy, all pods can reach to each other (all whitelisted)
## to check run below commands:

# kubectl exec -it dev-pod -n dev -- ping -c3 <def-pod-1_ip>
# kubectl exec -it dev-pod -n dev -- ping -c3 <def-pod-2_ip>
# kubectl exec -it dev-pod -n dev -- ping -c3 <def-pod-3_ip>
# kubectl exec -it def-pod-1 -- ping -c3 <dev-pod_ip>
# kubectl exec -it def-pod-1 -- ping -c3 <def-pod-2_ip>

## to verify from def-pod-4 to reach nginx pod (mandatory to check this, later we block this)

# kubectl exec -it def-pod-4 -- curl -m 3 http://<nginx-pod_ip>:80

####
## now apply the network policy:

# demo-1
# def-pod-1 in default namaspace are pingable only from dev-pod from development namespace
# kubectl apply -f 46-network-policy-demo-1.yaml
# kubectl exec -it dev-pod -n dev -- ping -c3 <def-pod-1_ip>    ### should be allowed
# kubectl exec -it def-pod-2 -- ping -c3 <def-pod-<any_pod_ip>  ### should be denied

# demo-2
# def-pod-2 are pingable from  def-pod-1 in default namaspace not by any other pod from any namespace
# kubectl apply -f 47-network-policy-demo-2.yaml
# kubectl exec -it def-pod-1 -- ping -c3 <def-pod-2_ip>             ### should be allowed
# kubectl exec -it def-pod-<any_pod_ip> -- ping -c3 <def-pod-2_ip>  ### should be denied

# demo-3
# allow all incoming to def-pod-3 in default namespace from anywhere but def-pod-3 can't reach anywhere
# kubectl apply -f 48-network-policy-demo-3.yaml
# kubectl exec -it def-pod-<any_pod_ip> -- ping -c3 <def-pod-3_ip>    ### should be allowed
# kubectl exec -it def-pod-3 -- ping -c3 <def-pod-<any_pod_ip>        ### should be denied

# demo-4
# allow incoming to def-pod-4 in default namepsace from anywhere but deny only port 80 from def-pod-4
# kubectl apply -f 49-network-policy-demo-4.yaml
# kubectl exec -it def-pod-<any_pod_ip> -- ping -c3 <def-pod-4_ip>    ### should be allowed
# kubectl exec -it def-pod-4 -- curl -m 3 http://<nginx-pod_ip>:80    ### should be denied
# kubectl exec -it def-pod-3 -- curl -m 3 http://<nginx-pod_ip>:80    ### should be allowed
